# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/pydemia/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME="cobalt2-pydemia"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  ssh-agent
  history
  kubectl
  # kubetail
)
source <(kubectl completion zsh)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8
export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
#export LC_COLLATE="en_US.UTF-8"
#export LC_CTYPE=="en_US.UTF-8"
#export LC_MESSAGES="en_US.UTF-8"
#export LC_MONETARY="en_US.UTF-8"
#export LC_NUMERIC="en_US.UTF-8"
#export LC_TIME="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#ZSH_THEME="cobalt2-pydemia"

# enable color support of ls and also add handy aliases
if [ -x "$(which dircolors)" ]; then
    test -r ~/.pydemia-config/.dircolors && eval "$(dircolors -b ~/.pydemia-config/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

source ~/.pydemia-config/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

alias sudo='sudo '

# f not running interactively, don't do anything
# [ -z "$PS1" ] && return

# export PS1="\[\e[31m\]tf-docker\[\e[m\] \[\e[33m\]\w\[\e[m\] > "
# export TERM=xterm-256color
alias grep="grep --color=auto"
alias ls="ls --color=auto"

echo -e "\e[1;31m"

# MOTD message
printf '%s' "$GREEN"
printf '%s\n' '_________             __                             '
printf '%s\n' '___/ __  /___________/ /________________________     '
printf '%s\n' '__/ /_/ // / / // __  // _ \ / __ `__ \_/_// __ `    '
printf '%s\n' '_/  ___// /_/ // / /_//  __// / / / / // // /_/ |    '
printf '%s\n' '/__/    \__, / \____/ \___//_/ /_/ /_//_/ \___,_\    '
printf '%s\n' '       /____/                                        '
printf "%s\n"
printf "${BLUE}${BOLD}%s${NORMAL}\n" "$(lsb_release -icrd)"

echo -e "\e[0;33m"

cat <<WARN
NOTICE:
To use 'gcloud'   : gcloud init
To use 'aws cli'  : aws configure
To use 'azure cli': azure login
WARN

# Turn off colors
echo -e "\e[m"

export WHOME="/mnt/c/Users/pydemia"
export APP_PATH="${HOME}/apps"
#export JAVA_HOME="/usr/lib/jvm/adoptopenjdk-11-hotspot-amd64"
#export JDK_HOME="/usr/lib/jvm/adoptopenjdk-11-hotspot-amd64"
export PATH="${JAVA_HOME}/bin:${PATH}"
export USER_PATH="$HOME/.local/bin"
export PATH="${USER_PATH}:${PATH}"

#alias gcloud-kf1=""

alias kubectl-me="kubectl config current-context;kubectl cluster-info"
alias kme="kubectl-me"
alias k="kubectl "

function kns () {
  NAMESPACE="${1:-default}"
  kubectl config set-context --current --namespace="${NAMESPACE}"
}

# # "kubectl -n istio-system get gw ingress-prd -o jsonpath='{.metadata.annotations.kubectl\.kubernetes\.io/last-applied-configuration}' | yq -y"

function kx () {
  NAMESPACE="$1"
  # SELECTOR="model=skh-bch-003"
  SELECTOR="$2"
  CMD="${3:-/bin/bash}"
  kubectl -n ${NAMESPACE} exec --stdin --tty "$(kubectl -n ${NAMESPACE} get pods -l ${SELECTOR} -o jsonpath='{.items[0].metadata.name}')" -- ${CMD}
}

function kxc () {
  NAMESPACE="$1"
  # SELECTOR="model=skh-bch-003"
  SELECTOR="$2"
  CONTAINER="$3"
  CMD="${4:-/bin/bash}"
  kubectl -n ${NAMESPACE} exec --stdin --tty "$(kubectl -n ${NAMESPACE} get pods -l ${SELECTOR} -o jsonpath='{.items[0].metadata.name}')" -c ${CONTAINER} -- ${CMD}
}

function kxp () {
  NAMESPACE="$1"
  # SELECTOR="model=skh-bch-003"
  PODNAME="$2"
  CONTAINER="$3"
  CMD="${4:-/bin/bash}"
  kubectl -n ${NAMESPACE} exec --stdin --tty ${PODNAME} -c ${CONTAINER} -- ${CMD}
}

function kdb () {
  NAMESPACE="${1:-default}"
  kubectl -n ${NAMESPACE} run --rm -it debug --image=pydemia/debug --restart=Never
}

function kdbs () {
  NAMESPACE="${1:-default}"
  kubectl -n ${NAMESPACE} run --rm -it debug --image=pydemia/debug-slim --restart=Never
}

# ===========================================
function isvclog () {
  NAMESPACE="${1:-default}"
  ISVC_NM="$2"
  COMPONENT="${3:-predictor}"
  DEPLOY_TYPE="${4:-default}"
  CONTAINER_NM="${5:-kfserving-container}"

  if [[ -z $ISVC_NM ]]; then
    echo "inferenceservice '-i' is not given."
    exit 1
  else
    echo "$ISVC_NM in $NAMESPACE"
    kubectl -n ${NAMESPACE} logs "$(kubectl -n ${NAMESPACE} get pods -l=serving.kubeflow.org/inferenceservice=${ISVC_NM},component=${COMPONENT},service.istio.io/canonical-name=${ISVC_NM}-${COMPONENT}-${DEPLOY_TYPE} -o=jsonpath='{.items[0].metadata.name}')" -c ${CONTAINER_NM}
  fi

}

# ===========================================

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/pydemia/apps/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/pydemia/apps/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/pydemia/apps/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/pydemia/apps/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

alias docker_rm_untagged='docker rmi $(docker images | grep "^<none>" | awk "{print $3}") && docker image prune -f'
alias docker_rm_after_build='docker images -f "dangling=true" -q'
alias docker_clean_images='docker rmi $(docker images -a --filter=dangling=true -q)'
alias docker_clean_ps='docker rm $(docker ps --filter=status=exited --filter=status=created -q)'
